{"ast":null,"code":"const url = 'https://api.spacexdata.com/v3/rockets';\nconst url1 = 'https://api.spacexdata.com/v3/missions';\n\nfunction restructureData(data) {\n  const arr = [];\n  data.forEach(data => {\n    arr.push({\n      id: data.id,\n      name: data.rocket_name,\n      type: data.rocket_type,\n      flickr_images: data.flickr_images[0]\n    });\n  });\n  return arr;\n}\n\nfunction takeMissionData(missions) {\n  const arr = [];\n  missions.forEach(mission => {\n    arr.push({\n      id: mission.id,\n      name: mission.mission_name,\n      description: mission.description\n    });\n  });\n  return arr;\n}\n\nexport const getRocketData = async (job, thunkAPI) => {\n  try {\n    const response = await fetch(url, job);\n    const data = await response.json();\n    const data2 = restructureData(data);\n    return data2;\n  } catch {\n    return thunkAPI.rejectWithValue('something went wrong');\n  }\n};\nexport const getMissionData = async (job, thunkAPI) => {\n  try {\n    const response = await fetch(url1, job);\n    const data = await response.json();\n    const data2 = getMissionData(data);\n    return data2;\n  } catch {\n    return thunkAPI.rejectWithValue('something went wrong');\n  }\n};","map":{"version":3,"names":["url","url1","restructureData","data","arr","forEach","push","id","name","rocket_name","type","rocket_type","flickr_images","takeMissionData","missions","mission","mission_name","description","getRocketData","job","thunkAPI","response","fetch","json","data2","rejectWithValue","getMissionData"],"sources":["/home/jutcodeit/Space-Travelers-Hub/src/services/api.service.js"],"sourcesContent":["\nconst url = 'https://api.spacexdata.com/v3/rockets'\nconst url1 = 'https://api.spacexdata.com/v3/missions'\n\n\nfunction  restructureData (data){\n    const arr =[]\ndata.forEach((data)=>{\n\n  arr.push({\n      id:data.id,\n      name:data.rocket_name,\n      type:data.rocket_type,\n      flickr_images:data.flickr_images[0]\n  })\n})\nreturn arr\n}\n\nfunction takeMissionData(missions){\n    const arr = []\n    missions.forEach((mission)=>{\n        arr.push({\n   id:mission.id,\n   name:mission.mission_name,\n   description:mission.description\n        })\n    })\n    return arr\n}\n\nexport const getRocketData =async (job,thunkAPI)=>{\n    try{\n const response = await fetch(url,job)\n const data = await response.json()\n  const data2 = restructureData(data)\n  return data2\n    }catch{\n        return thunkAPI.rejectWithValue('something went wrong')\n    }\n\n}\n\nexport const getMissionData =async (job,thunkAPI)=>{\n    try{\n const response = await fetch(url1,job)\n const data = await response.json()\n  const data2 = getMissionData(data)\n  return data2\n    }catch{\n        return thunkAPI.rejectWithValue('something went wrong')\n    }\n\n}"],"mappings":"AACA,MAAMA,GAAG,GAAG,uCAAZ;AACA,MAAMC,IAAI,GAAG,wCAAb;;AAGA,SAAUC,eAAV,CAA2BC,IAA3B,EAAgC;EAC5B,MAAMC,GAAG,GAAE,EAAX;EACJD,IAAI,CAACE,OAAL,CAAcF,IAAD,IAAQ;IAEnBC,GAAG,CAACE,IAAJ,CAAS;MACLC,EAAE,EAACJ,IAAI,CAACI,EADH;MAELC,IAAI,EAACL,IAAI,CAACM,WAFL;MAGLC,IAAI,EAACP,IAAI,CAACQ,WAHL;MAILC,aAAa,EAACT,IAAI,CAACS,aAAL,CAAmB,CAAnB;IAJT,CAAT;EAMD,CARD;EASA,OAAOR,GAAP;AACC;;AAED,SAASS,eAAT,CAAyBC,QAAzB,EAAkC;EAC9B,MAAMV,GAAG,GAAG,EAAZ;EACAU,QAAQ,CAACT,OAAT,CAAkBU,OAAD,IAAW;IACxBX,GAAG,CAACE,IAAJ,CAAS;MACdC,EAAE,EAACQ,OAAO,CAACR,EADG;MAEdC,IAAI,EAACO,OAAO,CAACC,YAFC;MAGdC,WAAW,EAACF,OAAO,CAACE;IAHN,CAAT;EAKH,CAND;EAOA,OAAOb,GAAP;AACH;;AAED,OAAO,MAAMc,aAAa,GAAE,OAAOC,GAAP,EAAWC,QAAX,KAAsB;EAC9C,IAAG;IACN,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACtB,GAAD,EAAKmB,GAAL,CAA5B;IACA,MAAMhB,IAAI,GAAG,MAAMkB,QAAQ,CAACE,IAAT,EAAnB;IACC,MAAMC,KAAK,GAAGtB,eAAe,CAACC,IAAD,CAA7B;IACA,OAAOqB,KAAP;EACG,CALD,CAKC,MAAK;IACF,OAAOJ,QAAQ,CAACK,eAAT,CAAyB,sBAAzB,CAAP;EACH;AAEJ,CAVM;AAYP,OAAO,MAAMC,cAAc,GAAE,OAAOP,GAAP,EAAWC,QAAX,KAAsB;EAC/C,IAAG;IACN,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACrB,IAAD,EAAMkB,GAAN,CAA5B;IACA,MAAMhB,IAAI,GAAG,MAAMkB,QAAQ,CAACE,IAAT,EAAnB;IACC,MAAMC,KAAK,GAAGE,cAAc,CAACvB,IAAD,CAA5B;IACA,OAAOqB,KAAP;EACG,CALD,CAKC,MAAK;IACF,OAAOJ,QAAQ,CAACK,eAAT,CAAyB,sBAAzB,CAAP;EACH;AAEJ,CAVM"},"metadata":{},"sourceType":"module"}